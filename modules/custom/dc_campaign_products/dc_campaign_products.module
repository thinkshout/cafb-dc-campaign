<?php
/**
 * @file
 * Code for the DC Campaign Products feature.
 */

include_once 'dc_campaign_products.features.inc';


/**
 * Implements hook_form_alter().
 *
 */
function dc_campaign_products_form_alter(&$form, &$form_state, $form_id) {
  try {
    if ($form_id == 'redhen_donation_form') {

      // Hide the tax field
      $form['field_tax_deductible_amount']['#type']= 'hidden';
      $donation = $form_state['donation'];
      if (!isset($form_state['#donation_settings'])) {
        $form_state['donation_settings']
          = $settings
          = redhen_donation_entity_settings(
          $donation->entity_type,
          $donation->entity_id,
          TRUE
        );
      }
      $campaign = entity_load_single('redhen_campaign', $donation->entity_id);
      $campaign_wrapper = entity_metadata_wrapper('redhen_campaign', $campaign);

      if (isset($campaign_wrapper->field_product->product_id)) {
        $product_id = $campaign_wrapper->field_product->product_id->value();
        $form_state['product_id'] = $product_id;
        $product = commerce_product_load($product_id);
        $wrapper = entity_metadata_wrapper('commerce_product', $product);
        $description = $wrapper->field_product_description->value();
        $image_uri = $wrapper->field_product_image->file->value()->uri;

        // Rearrange the form
        $form['donation']['#weight'] = 2;
        $form['donation']['#required'] = false;
        $form['donation']['#title'] = t('Additional ') . $form['donation']['#title'];
        $form['customer_profile']['#weight'] = 3;
        $form['field_donation_comment']['#weight'] = 4;

        // Add the product above the donation amount.
        $form['product_group'] = array(
          '#title' => '',
          '#type' => 'fieldset',
          '#attributes' => array(
            'id' => array('product-group'),
            'class' => array('product-group'),
          ),
          '#weight' => 1,
        );
        $form['product_group']['product_title'] = array(
          '#markup' => t($product->title . t(' purchase')),
          '#prefix' => '<div class="product-title">',
          '#suffix' => '</div>',
        );
        $form['product_group']['product_left'] = array(
          '#title' => '',
          '#type' => 'fieldset',
          '#attributes' => array(
            'class' => array('product-left'),
          ),
        );

        $price = commerce_product_calculate_sell_price($product);
        $price_display = commerce_currency_format($price['amount'], $price['currency_code']);

        $price_markup = '<div class="form-item form-type-custom form-item-product-price">'
          . '<label for="product-price">' . t('Price: ') . '</label>'
          . '<div id="product-price" class="product-price">' . $price_display . '</div></div>';
        $form['product_group']['product_left']['price'] = array(
          '#markup' => $price_markup,
          '#prefix' => '<div class="container-inline">',
          '#suffix' => '</div>',
        );
        $form['product_group']['product_left']['quantity'] = array(
          '#type' => 'textfield',
          '#title' => t('Quantity: '),
          '#size' => 4,
          '#required' => FALSE,
          '#prefix' => '<div class="container-inline">',
          '#suffix' => '</div>',
          '#ajax' => array(
            'callback' => '_dc_campaign_products_set_total',
            'wrapper' => 'order-total-wrapper',
          ),
          '#default_value' => 0,
        );
        $form['product_group']['product_left']['product_description'] = array(
          '#markup' => $description,
          '#prefix' => '<div class="container-inline product-description">',
          '#suffix' => '</div>',
        );
        // If we are editing an existing form, we already have the values
        if (!empty($form['product_group']['product_left']['quantity']['#default_value'])
          || isset($form_state['values']['quantity'][0])) {
          $form['product_group']['product_left']['order_price'] = _dc_campaign_products_set_total($form, $form_state);
        } else {
          $total_markup = '<div class="form-item form-type-custom form-item-order-price">'
            . '<label for="order-price">' . t('Total: ') . '</label>'
            . '<div id="order-price" class="order-price">$0</div></div>';
          $form['product_group']['product_left']['order_total'] = array(
            '#markup' => $total_markup,
            '#prefix' => '<div id="order-total-wrapper" class="container-inline">',
            '#suffix' => '</div>',
          );
        }
        $form['product_group']['product_image'] = array(
          '#markup' => theme('image_style', array(
            'path' => $image_uri,
            'style_name' => 'square_thumbnail'
          )),
          '#prefix' => '<div class="product-image">',
          '#suffix' => '</div>',
        );
        $form['#validate'][] = 'dc_campaign_products_form_validate';
      }
    }
  }
  catch (exception $e) {
  }
}

function dc_campaign_products_form_validate($form, &$form_state) {

  if (empty($form_state['values']['donation']) && empty($form_state['values']['quantity'])) {
    form_set_error('quantity', t('Please select a quantity or a donation amount.'));
  }
  if (!empty($form_state['values']['quantity'])) {
     if (!ctype_digit($form_state['values']['quantity'])) {
       form_set_error('quantity', t('Please use whole number amounts for quantity.'));
     }
      if ($form_state['values']['quantity'] <= 0) {
      form_set_error('quantity', t('The quantity must be a positive number.'));
    }
  }

  // This code is added because the Ajax for price total adds an illegal option detected error.
  $errors = form_get_errors();
  if ($errors) {
    // Clear errors.
    form_clear_error();
    // Clear error messages.
    $error_messages = drupal_get_messages('error');
    // Initialize an array where removed error messages are stored.
    $removed_messages = array();


    // Remove all errors originated by the 'foo][bar' element.
    foreach ($errors as $name => $error_message) {
      if ($name == 'donation][select') {
        $removed_messages[] = $error_message;
        unset($errors[$name]);
      }
    }

    // Reinstate remaining errors.
    foreach ($errors as $name => $error) {
      form_set_error($name, $error);
      // form_set_error() calls drupal_set_message(), so we have to filter out
      // these from the error messages as well.
      $removed_messages[] = $error;
    }

    // Reinstate remaining error messages (which, at this point, are messages that
    // were originated outside of the validation process).
    foreach (array_diff($error_messages['error'], $removed_messages) as $message) {
      drupal_set_message($message, 'error');
    }
  }
}

/*
 * This relies on a hook in redhen donation that doesn't exist yet.
 */
function dc_campaign_products_redhen_order_alter(&$form, &$form_state, &$order_wrapper) {
  try {
    $values = $form_state['values'];
    $donation = $form_state['donation'];
    $donation_type = redhen_donation_type_load($donation->bundle());

    // Set some sensible defaults because this gets printed in the email even if the admin doesn't set a value
    $deductible_amount['amount'] = $form_state['values']['donation'];
    $deductible_amount['currency_code'] = 'USD';
    $form_state['values']['field_tax_deductible_amount']['und'][0] = $deductible_amount;
    $order = $order_wrapper->value();

    $order_id = $order->order_id;
    $line_item_type
      = isset($donation_type->settings['commerce_settings']['line_item_type']) ?
      $donation_type->settings['commerce_settings']['line_item_type'] :
      'product';

    // Check set on quantity value because I can't get the check based on product ID to work
    if (isset($form_state['values']['quantity']) && !empty($form_state['values']['quantity'])) {
      $product_id = $form_state['product_id'];
      $product = commerce_product_load($product_id);
      $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
      if (!empty($product_wrapper->field_tax_deductible_amount)) {
        $deductible_amount = $product_wrapper->field_tax_deductible_amount->value();
      }
      $price = commerce_product_calculate_sell_price($product);
      $quantity = $form_state['values']['quantity'];
      $line_item = commerce_product_line_item_new($product, '1', $order_id, array(), $line_item_type);
      field_attach_submit('commerce_line_item', $line_item, $form['line_item'], $form_state);
      $donation_amount = $quantity * $price['amount'];
      $currency = $form_state['currency'];

      redhen_donation_update_line_item_price($line_item, $donation_amount, $currency);

      // Save the line item to get the ID.
      commerce_line_item_save($line_item);

      // Add the item to the list of line items.
      $order_wrapper->commerce_line_items[] = $line_item;

      $additional_donation = $form_state['values']['donation'];
      $deductible_amount['amount'] = $deductible_amount['amount'] * $quantity + $additional_donation;
      $form_state['values']['field_tax_deductible_amount']['und'][0] = $deductible_amount;
      if ($deductible_amount['amount'] != 0) {
        $deduction = commerce_currency_format($deductible_amount['amount'], $price['currency_code'], $product);
        drupal_set_message($deduction . t(' of your donation is tax deductible.'));
      }
    }
  }
  catch (exception $e) {
  }
}

/**
 * AJAX callback to grab all the nodes with a given term.
 *
 */
function _dc_campaign_products_set_total($form, $form_state) {
  if (isset($form_state['triggering_element'])) {
    $product_id = $form_state['product_id'];
    $quantity = $form_state['triggering_element']['#value'];

    $product = commerce_product_load($product_id);
    $price = commerce_product_calculate_sell_price($product);
    $price_display = commerce_currency_format($quantity * $price['amount'], $price['currency_code']);

    $total_markup = '<div class="form-item form-type-custom form-item-order-price">'
      . '<label for="order-price">' . t('Total: ') . '</label>'
      . '<div id="order-price" class="order-price">' . $price_display . '</div></div>';
    $form['product_group']['product_left']['order_total'] = array(
      '#markup' => $total_markup,
      '#prefix' => '<div id="order-total-wrapper" class="container-inline">',
      '#suffix' => '</div>',
    );

    return $form['product_group']['product_left']['order_total'];
  }
}